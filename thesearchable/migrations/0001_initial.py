# Generated by Django 4.1.3 on 2023-03-14 18:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('picture', models.ImageField(upload_to='authorimage/')),
                ('degree', models.CharField(max_length=300)),
                ('about', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thecategory', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='classification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theclass', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='countries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=600)),
                ('body', models.TextField()),
                ('chapterNumber', models.IntegerField(blank=True, null=True)),
                ('entryPubDate', models.DateField()),
                ('submissionDate', models.DateTimeField(auto_now=True)),
                ('entryCover', models.ImageField(blank=True, null=True, upload_to='entrycover')),
                ('downloadedUser', models.ManyToManyField(blank=True, related_name='downloadedusers', to=settings.AUTH_USER_MODEL)),
                ('entryOrigin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='thesearchable.countries')),
                ('entryauthor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='thesearchable.author')),
            ],
        ),
        migrations.CreateModel(
            name='rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField()),
                ('ratedUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='userInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved', models.BooleanField(default=False)),
                ('approvedcountries', models.ManyToManyField(blank=True, to='thesearchable.countries')),
                ('downloadedEntries', models.ManyToManyField(blank=True, related_name='downloadedbooks', to='thesearchable.entry')),
                ('favouriteEntries', models.ManyToManyField(blank=True, related_name='favourites', to='thesearchable.entry')),
                ('ratedbooks', models.ManyToManyField(blank=True, to='thesearchable.rating')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('viewedEntries', models.ManyToManyField(blank=True, related_name='viewedEntries', to='thesearchable.entry')),
            ],
        ),
        migrations.CreateModel(
            name='part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('relatedEntries', models.ManyToManyField(blank=True, to='thesearchable.entry')),
            ],
        ),
        migrations.AddField(
            model_name='entry',
            name='relatedRatings',
            field=models.ManyToManyField(blank=True, to='thesearchable.rating'),
        ),
        migrations.AddField(
            model_name='entry',
            name='viewedUsers',
            field=models.ManyToManyField(blank=True, related_name='viewedUsers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='door',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('relatedParts', models.ManyToManyField(blank=True, to='thesearchable.part')),
            ],
        ),
        migrations.CreateModel(
            name='book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=499)),
                ('containsParts', models.BooleanField(default=False)),
                ('containsDoors', models.BooleanField(default=False)),
                ('publicationDate', models.DateField()),
                ('cover', models.ImageField(upload_to='bookcover')),
                ('author', models.ManyToManyField(blank=True, max_length=300, to='thesearchable.author')),
                ('bookCategory', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='thesearchable.categories')),
                ('relatedChapters', models.ManyToManyField(blank=True, to='thesearchable.entry')),
                ('relatedDoors', models.ManyToManyField(blank=True, to='thesearchable.door')),
                ('relatedParts', models.ManyToManyField(blank=True, to='thesearchable.part')),
            ],
        ),
    ]
