import * as _elastic_elasticsearch_lib_api_types from '@elastic/elasticsearch/lib/api/types';
import Searchkit__default, { SearchkitConfig, AppSettings, RequestOptions } from 'searchkit';
export * from 'searchkit';

declare class Client {
    private config;
    private settings;
    searchkit: Searchkit__default;
    constructor(config: SearchkitConfig, settings?: AppSettings);
    handleRequest(body: any, requestOptions?: RequestOptions): Promise<{
        results: ({
            facetHits: any;
            exhaustiveFacetsCount: boolean;
            processingTimeMS: number;
        } | {
            userData?: unknown[] | undefined;
            hits: {
                _geoloc?: {
                    lat: number;
                    lng: number;
                } | null | undefined;
                _snippetResult?: Record<string, any> | undefined;
                _highlightResult?: Record<string, any> | undefined;
                inner_hits?: Record<string, _elastic_elasticsearch_lib_api_types.SearchInnerHitsResult> | undefined;
                objectID: string;
            }[];
            index: string;
            params: string;
            renderingContent: {
                facetOrdering: {
                    facets: {
                        order: string[];
                    };
                    values: Record<string, {
                        sortRemainingBy: "count";
                    }> | undefined;
                };
            };
            hitsPerPage: number;
            processingTimeMS: number;
            nbHits: number | undefined;
            page: number;
            nbPages: number;
            query: string;
            appliedRules: string[];
            exhaustiveNbHits: boolean;
            exhaustiveFacetsCount: boolean;
            exhaustiveTypo: boolean;
            exhaustive: {
                facetsCount: boolean;
                nbHits: boolean;
                typo: boolean;
            };
        })[];
    }>;
}
declare const createClient: (config: SearchkitConfig, settings?: AppSettings) => Client;

export { createClient as default };
