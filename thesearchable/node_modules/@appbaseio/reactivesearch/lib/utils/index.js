'use strict';

exports.__esModule = true;
exports.getValueArrayWithinLimits = exports.getNumericRangeArray = exports.formatDateString = exports.MODIFIER_KEYS = exports.isEmpty = exports.isQueryIdentical = exports.getNullValuesQuery = exports.handleCaretPosition = exports.getValidPropsKeys = exports.isIdentical = exports.isEvent = exports.composeThemeObject = exports.X_SEARCH_CLIENT = exports.connect = exports.ReduxGetStateContext = exports.SearchPreferencesContext = exports.ReactReduxContext = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.parseValueArray = parseValueArray;
exports.escapeRegExp = escapeRegExp;
exports.isNumeric = isNumeric;
exports.isHotkeyCombination = isHotkeyCombination;
exports.getCharFromCharCode = getCharFromCharCode;
exports.parseFocusShortcuts = parseFocusShortcuts;
exports.extractModifierKeysFromFocusShortcuts = extractModifierKeysFromFocusShortcuts;
exports.getNumericRangeValue = getNumericRangeValue;
exports.decodeHtml = decodeHtml;
exports.useAnalytics = useAnalytics;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _dayjs = require('dayjs');

var _dayjs2 = _interopRequireDefault(_dayjs);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReactReduxContext = exports.ReactReduxContext = _react2.default.createContext(null);

var SearchPreferencesContext = exports.SearchPreferencesContext = _react2.default.createContext(null);

var ReduxGetStateContext = exports.ReduxGetStateContext = _react2.default.createContext(null);

/**
 * This exported connect expects two args (mapStateToProps, mapStateToDispatch).
 * If we don't want to pass any of them, then we need to explicityly pass as null.
 */
var connect = exports.connect = function connect() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	return _reactRedux.connect.apply(undefined, args.concat([null, { context: ReactReduxContext }]));
};

var X_SEARCH_CLIENT = exports.X_SEARCH_CLIENT = 'ReactiveSearch React';

var composeThemeObject = exports.composeThemeObject = function composeThemeObject() {
	var ownTheme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var userTheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	return {
		typography: _extends({}, ownTheme.typography, userTheme.typography),
		colors: _extends({}, ownTheme.colors, userTheme.colors),
		component: _extends({}, ownTheme.component, userTheme.component)
	};
};

var isEvent = exports.isEvent = function isEvent(candidate) {
	return !!(candidate && candidate.stopPropagation && candidate.preventDefault);
};
/**
 * To check if two functions are identical
 */
var isIdentical = exports.isIdentical = function isIdentical(a, b) {
	if (!a && !b) return true;
	if (typeof a === 'function' && typeof b === 'function') {
		if ((0, _helper.isEqual)(a(), b())) {
			return true;
		}
		return false;
	}
	return false;
};
var getValidPropsKeys = exports.getValidPropsKeys = function getValidPropsKeys() {
	var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	return Object.keys(props).filter(function (i) {
		return _constants.validProps.includes(i);
	});
};
/**
 * Handles the caret position for input components
 * @param {HTMLInputElement} e
 */
var handleCaretPosition = exports.handleCaretPosition = function handleCaretPosition(e) {
	if (window) {
		var caret = e.target.selectionStart;
		var element = e.target;
		window.requestAnimationFrame(function () {
			element.selectionStart = caret;
			element.selectionEnd = caret;
		});
	}
};
// elastic search query for including null values
var getNullValuesQuery = exports.getNullValuesQuery = function getNullValuesQuery(fieldName) {
	return {
		bool: {
			must_not: {
				exists: {
					field: fieldName
				}
			}
		}
	};
};

// parses current array (i.e. this.props.value) for `onChange` callback for multi-* components
function parseValueArray() {
	var originalArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var currentValue = arguments[1];

	var newValue = Object.assign([], originalArr);
	var currentValueIndex = newValue.indexOf(currentValue);
	if (currentValueIndex > -1) newValue.splice(currentValueIndex, 1);else newValue.push(currentValue);
	return newValue;
}

// escapes regex for special characters: \ => \\, $ => \$
function escapeRegExp(string) {
	return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}

/**
 * @param value
 * @param {Object} props
 * @param {Object} prevProps
 * @param {'defaultQuery' | 'customQuery'} key
 */
var isQueryIdentical = exports.isQueryIdentical = function isQueryIdentical() {
	var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var prevProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	var key = arguments[3];

	if (!key) return true;
	if (typeof props[key] !== 'function' || typeof prevProps[key] !== 'function') return true;
	// to not call original defaultQuery and customQuery, as here we are only comparing
	return (0, _helper.isEqual)(props[key](value, props), prevProps[key](value, prevProps));
};

var isEmpty = exports.isEmpty = function isEmpty(val) {
	return !(val && val.length && Object.keys(val).length);
};

function isNumeric(value) {
	return (/^-?\d+$/.test(value)
	);
}

// check if passed shortcut a key combination
function isHotkeyCombination(hotkey) {
	return typeof hotkey === 'string' && hotkey.indexOf('+') !== -1;
}

// used for getting correct string char from keycode passed
// the below algebraic expression is used to get the correct ascii code out of the e.which
// || e.keycode returned value
// since the keyboards doesn't understand ascii but scan codes and they differ for
// certain keys such as '/'
// stackoverflow ref: https://stackoverflow.com/a/29811987/10822996
function getCharFromCharCode(passedCharCode) {
	var which = passedCharCode;
	// eslint-disable-next-line no-mixed-operators
	var chrCode = which - 48 * Math.floor(which / 48);
	return String.fromCharCode(which >= 96 ? chrCode : which);
}

// used for parsing focusshortcuts for keycodes passed as string, eg: 'ctrl+/' is same as 'ctrl+47'
// returns focusShortcuts containing appropriate key charsas depicted on keyboards
function parseFocusShortcuts(focusShortcutsArray) {
	if (isEmpty(focusShortcutsArray)) return [];

	var parsedFocusShortcutsArray = [];
	focusShortcutsArray.forEach(function (element) {
		if (typeof element === 'string') {
			if (isHotkeyCombination(element)) {
				// splitting the combination into pieces
				var splitCombination = element.split('+');
				var parsedSplitCombination = [];
				// parsedCombination would have all the keycodes converted into chars
				var parsedCombination = '';
				for (var i = 0; i < splitCombination.length; i += 1) {
					if (isNumeric(splitCombination[i])) {
						parsedSplitCombination.push(getCharFromCharCode(+splitCombination[i]));
					} else {
						parsedSplitCombination.push(splitCombination[i]);
					}
				}
				parsedCombination = parsedSplitCombination.join('+');
				parsedFocusShortcutsArray.push(parsedCombination);
			} else if (isNumeric(element)) {
				parsedFocusShortcutsArray.push(getCharFromCharCode(+element));
			} else {
				// single char shortcut, eg: '/'
				parsedFocusShortcutsArray.push(element);
			}
		} else {
			// if not a string the the shortcut is assumed to be a keycode
			parsedFocusShortcutsArray.push(getCharFromCharCode(element));
		}
	});
	return parsedFocusShortcutsArray;
}

var MODIFIER_KEYS = exports.MODIFIER_KEYS = ['shift', 'ctrl', 'alt', 'control', 'option', 'cmd', 'command'];

// filter out modifierkeys such as ctrl, alt, command, shift from focusShortcuts prop
function extractModifierKeysFromFocusShortcuts(focusShortcutsArray) {
	return focusShortcutsArray.filter(function (shortcutKey) {
		return MODIFIER_KEYS.includes(shortcutKey);
	});
}

// returns the milliseconds value for RangeSlider/ DynamicRangeSlider for date types
// returns the value as is, if the simple numerics are used
// this pertains to the convention that internally our components uses numerics for local state
function getNumericRangeValue(value, isDateType) {
	try {
		if (isDateType && value !== undefined && value !== null && (0, _dayjs2.default)(new Date(value)).isValid()) {
			return (0, _dayjs2.default)(new Date(value)).valueOf();
		}
		return parseFloat(value);
	} catch (e) {
		console.error(e);
		return parseFloat(value);
	}
}

var formatDateString = exports.formatDateString = function formatDateString(date, format) {
	try {
		return (0, _dayjs2.default)(new Date(date)).format(format || 'YYYY-MM-DD[T]HH:mm:ss');
	} catch (e) {
		return date;
	}
};

var getNumericRangeArray = exports.getNumericRangeArray = function getNumericRangeArray(valueObj, queryFormat) {
	if (!valueObj) {
		return null;
	}
	return [getNumericRangeValue(valueObj.start, (0, _helper.isValidDateRangeQueryFormat)(queryFormat)), getNumericRangeValue(valueObj.end, (0, _helper.isValidDateRangeQueryFormat)(queryFormat))].filter(function (val) {
		return typeof val === 'number';
	});
};

// takes in arrays of length 2
// returns inrange value array
// where the 2nd argument is the reference of rangelimits

// isFirstValueChanging tells which of the two values in array is undergoing change
var getValueArrayWithinLimits = exports.getValueArrayWithinLimits = function getValueArrayWithinLimits(currentValueArray, rangeArray) {
	try {
		var currentStart = currentValueArray[0],
		    currentEnd = currentValueArray[1];
		var limitedStart = rangeArray[0],
		    limitedEnd = rangeArray[1];

		var _ref = [].concat(currentValueArray),
		    newStart = _ref[0],
		    newEnd = _ref[1];

		newStart = currentStart < limitedStart ? limitedStart : currentStart;
		newEnd = currentEnd > limitedEnd ? limitedEnd : currentEnd;

		if (newStart > newEnd) {
			return rangeArray; // we reset the values
		}
		return [newStart, newEnd];
	} catch (e) {
		console.error(e);
		return currentValueArray;
	}
};

function decodeHtml(str) {
	if (typeof str !== 'string') {
		return str;
	}
	return str.replace(/&#([0-9]{1,3});/gi, function (match, numStr) {
		var num = parseInt(numStr, 10); // read num as normal number
		return String.fromCharCode(num);
	});
}

function useAnalytics() {
	var ctx = (0, _react.useContext)(ReactReduxContext);
	return ctx && ctx.storeState.analyticsRef;
}