'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _appbaseJs = require('appbase-js');

var _appbaseJs2 = _interopRequireDefault(_appbaseJs);

var _analytics = require('@appbaseio/analytics');

var _analytics2 = _interopRequireDefault(_analytics);

require('url-search-params-polyfill');

var _emotionTheming = require('emotion-theming');

var _reactivecore = require('@appbaseio/reactivecore');

var _reactivecore2 = _interopRequireDefault(_reactivecore);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _analytics3 = require('@appbaseio/reactivecore/lib/actions/analytics');

var _value = require('@appbaseio/reactivecore/lib/actions/value');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _URLParamsProvider = require('./URLParamsProvider');

var _URLParamsProvider2 = _interopRequireDefault(_URLParamsProvider);

var _theme = require('../../styles/theme');

var _theme2 = _interopRequireDefault(_theme);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable global-require */

var ReactiveBase = function (_Component) {
	_inherits(ReactiveBase, _Component);

	function ReactiveBase(props) {
		_classCallCheck(this, ReactiveBase);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		_this.state = {
			key: '__REACTIVE_BASE__'
		};

		_this.setStore(props);
		return _this;
	}

	ReactiveBase.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var _this2 = this;

		(0, _helper.checkSomePropChange)(this.props, prevProps, ['app', 'url', 'type', 'credentials', 'mapKey', 'mapLibraries', 'headers', 'graphQLUrl'], function () {
			_this2.setStore(_this2.props);
			_this2.setState(function (state) {
				return {
					key: state.key + '-0'
				};
			});
		});
		(0, _helper.checkSomePropChange)(this.props, prevProps, ['reactivesearchAPIConfig'], function () {
			if (_this2.store) {
				_this2.store.dispatch((0, _analytics3.updateAnalyticsConfig)(_this2.props.reactivesearchAPIConfig));
			}
		});
	};

	ReactiveBase.prototype.componentDidCatch = function componentDidCatch(error, errorInfo) {
		console.error("An error has occured. You're using Reactivesearch Version:", (process.env.VERSION || require('../../../package.json').version) + '.', 'If you think this is a problem with Reactivesearch, please try updating', "to the latest version. If you're already at the latest version, please open", 'an issue at https://github.com/appbaseio/reactivesearch/issues', error, errorInfo);
	};

	ReactiveBase.prototype.render = function render() {
		var theme = (0, _utils.composeThemeObject)((0, _theme2.default)(this.props.themePreset), this.props.theme);
		return _react2.default.createElement(
			_utils.SearchPreferencesContext.Provider,
			{ value: this.props.preferences },
			_react2.default.createElement(
				_emotionTheming.ThemeProvider,
				{ theme: theme, key: this.state.key },
				_react2.default.createElement(
					_reactRedux.Provider,
					{ context: _utils.ReactReduxContext, store: this.store },
					_react2.default.createElement(
						_URLParamsProvider2.default,
						{
							headers: this.headers,
							style: this.props.style,
							as: this.props.as,
							className: this.props.className,
							getSearchParams: this.props.getSearchParams,
							setSearchParams: this.props.setSearchParams
						},
						_react2.default.createElement(
							_utils.ReduxGetStateContext.Provider,
							{ value: this.getReduxState },
							this.props.children
						)
					)
				)
			)
		);
	};

	_createClass(ReactiveBase, [{
		key: 'headers',
		get: function get() {
			var _props = this.props,
			    headers = _props.headers,
			    reactivesearchAPIConfig = _props.reactivesearchAPIConfig,
			    mongodb = _props.mongodb,
			    endpoint = _props.endpoint;

			var _ref = reactivesearchAPIConfig || {},
			    enableTelemetry = _ref.enableTelemetry;

			return _extends({}, !mongodb && _extends({
				'X-Search-Client': _utils.X_SEARCH_CLIENT
			}, enableTelemetry === false && { 'X-Enable-Telemetry': false }), headers, endpoint && endpoint.headers && _extends({}, endpoint.headers));
		}
	}]);

	return ReactiveBase;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.setStore = function (props) {
		_this3.type = props.type ? props.type : '*';

		var credentials = props.url && props.url.trim() !== '' && !props.credentials ? null : props.credentials;

		var url = props.url && props.url.trim() !== '' ? props.url : '';
		if (props.endpoint instanceof Object) {
			if (props.endpoint.url) {
				url = props.endpoint.url;
			} else {
				throw Error('Error(ReactiveSearch): The `endpoint` prop object requires `url` property.');
			}
		}
		var config = _extends({
			url: url,
			app: props.app,
			credentials: credentials,
			type: _this3.type,
			transformRequest: props.transformRequest,
			analytics: props.reactivesearchAPIConfig ? props.reactivesearchAPIConfig.recordAnalytics : true,
			analyticsConfig: props.reactivesearchAPIConfig,
			graphQLUrl: props.graphQLUrl,
			transformResponse: props.transformResponse,
			mongodb: props.mongodb
		}, props.endpoint instanceof Object && { endpoint: props.endpoint });

		var queryParams = '';
		if (typeof window !== 'undefined') {
			queryParams = props.getSearchParams ? props.getSearchParams() : window.location.search;
		} else {
			queryParams = props.queryParams || '';
		}

		var params = new URLSearchParams(queryParams);
		var selectedValues = {};
		var urlValues = {};

		Array.from(params.keys()).forEach(function (key) {
			try {
				var _extends2, _extends3;

				var parsedParams = JSON.parse(params.get(key));
				var selectedValue = {};
				if (parsedParams.value) {
					selectedValue.value = parsedParams.value;
				} else {
					selectedValue.value = parsedParams;
				}
				if (parsedParams.category) selectedValue.category = parsedParams.category;
				selectedValue.reference = 'URL';
				selectedValues = _extends({}, selectedValues, (_extends2 = {}, _extends2[key] = selectedValue, _extends2));
				urlValues = _extends({}, urlValues, (_extends3 = {}, _extends3[key] = selectedValue.value, _extends3));
			} catch (e) {
				// Do not add to selectedValues if JSON parsing fails.
			}
		});

		var themePreset = props.themePreset,
		    endpoint = props.endpoint,
		    reactivesearchAPIConfig = props.reactivesearchAPIConfig;


		var appbaseRef = (0, _appbaseJs2.default)(config);

		appbaseRef.transformRequest = function (request) {
			var modifiedRequest = (0, _helper.transformRequestUsingEndpoint)(request, endpoint);
			if (_this3.props.transformRequest) return _this3.props.transformRequest(modifiedRequest);
			return modifiedRequest;
		};

		var analyticsInitConfig = {
			url: url && url.replace(/\/\/.*@/, '//'),
			credentials: appbaseRef.credentials,
			// When endpoint prop is used index is not defined, so we use _default
			index: appbaseRef.app || '_default',
			globalCustomEvents: reactivesearchAPIConfig && reactivesearchAPIConfig.customEvents
		};

		try {
			if (_this3.props.endpoint && _this3.props.endpoint.url) {
				// Remove parts between '//' and first '/' in the url
				analyticsInitConfig.url = _this3.props.endpoint.url.replace(/\/\/(.*?)\/.*/, '//$1');
				var headerCredentials = _this3.props.endpoint.headers && _this3.props.endpoint.headers.Authorization;
				analyticsInitConfig.credentials = headerCredentials && headerCredentials.replace('Basic ', '');
				// Decode the credentials
				analyticsInitConfig.credentials = analyticsInitConfig.credentials && atob(analyticsInitConfig.credentials);
			}
		} catch (e) {
			console.error('Endpoint not set correctly for analytics');
			console.error(e);
		}

		var analyticsRef = void 0;
		if (config.analytics) {
			analyticsRef = _analytics2.default.init(analyticsInitConfig);
		}

		var initialState = _extends({
			config: _extends({}, config, {
				mapKey: props.mapKey,
				mapLibraries: props.mapLibraries,
				themePreset: themePreset,
				initialQueriesSyncTime: props.initialQueriesSyncTime,
				initialTimestamp: new Date().getTime()
			}),
			appbaseRef: appbaseRef,
			analyticsRef: analyticsRef,
			selectedValues: selectedValues,
			urlValues: urlValues,
			headers: _this3.headers
		}, _this3.props.initialState);

		_this3.store = (0, _reactivecore2.default)(initialState);

		// server side rendered app to collect context
		if (typeof window === 'undefined' && props.contextCollector && !_this3.calledContextCollector) {
			_this3.calledContextCollector = true;
			var res = props.contextCollector({
				ctx: _this3.store
			});

			// necessary for supporting SSR of queryParams
			_this3.store.dispatch((0, _value.setValues)(res.selectedValues));
		}
	};

	this.getReduxState = function () {
		return _this3.store.getState();
	};
};

ReactiveBase.defaultProps = {
	theme: {},
	themePreset: 'light',
	initialState: {},
	graphQLUrl: '',
	as: 'div',
	endpoint: null
};

ReactiveBase.propTypes = {
	app: _types2.default.string,
	as: _types2.default.string,
	children: _types2.default.children,
	credentials: _types2.default.string,
	headers: _types2.default.headers,
	queryParams: _types2.default.string,
	theme: _types2.default.style,
	themePreset: _types2.default.themePreset,
	type: _types2.default.string,
	url: _types2.default.string,
	transformRequest: _types2.default.func,
	initialQueriesSyncTime: _types2.default.number,
	mapKey: _types2.default.string,
	mapLibraries: _types2.default.stringArray,
	style: _types2.default.style,
	className: _types2.default.string,
	initialState: _types2.default.children,
	analytics: _types2.default.bool,
	reactivesearchAPIConfig: _types2.default.appbaseConfig,
	graphQLUrl: _types2.default.string,
	transformResponse: _types2.default.func,
	getSearchParams: _types2.default.func,
	setSearchParams: _types2.default.func,
	mongodb: _types2.default.mongodb,
	preferences: _types2.default.preferences,
	endpoint: _types2.default.endpoint,
	contextCollector: _types2.default.func
};

exports.default = ReactiveBase;