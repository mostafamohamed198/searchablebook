'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /** @jsxRuntime classic */
/** @jsx jsx */


var _core = require('@emotion/core');

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _emotionTheming = require('emotion-theming');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _suggestions = require('@appbaseio/reactivecore/lib/utils/suggestions');

var _query = require('@appbaseio/reactivecore/lib/actions/query');

var _transform = require('@appbaseio/reactivecore/lib/utils/transform');

var _PreferencesConsumer = require('../../basic/PreferencesConsumer');

var _PreferencesConsumer2 = _interopRequireDefault(_PreferencesConsumer);

var _ComponentWrapper = require('../../basic/ComponentWrapper');

var _ComponentWrapper2 = _interopRequireDefault(_ComponentWrapper);

var _Container = require('../../../styles/Container');

var _Container2 = _interopRequireDefault(_Container);

var _utils = require('../../../utils');

var _Input = require('../../../styles/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Title = require('../../../styles/Title');

var _Title2 = _interopRequireDefault(_Title);

var _HierarchicalMenuComponent = require('./HierarchicalMenuComponent');

var _HierarchicalMenuComponent2 = _interopRequireDefault(_HierarchicalMenuComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useConstructor = function useConstructor() {
	var callBack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

	var _useState = (0, _react.useState)(false),
	    hasBeenCalled = _useState[0],
	    setHasBeenCalled = _useState[1];

	if (hasBeenCalled) return;
	callBack();
	setHasBeenCalled(true);
};

var transformValueIntoLocalState = function transformValueIntoLocalState(valueArray) {
	var valueToSet = {};
	if (valueArray.length) {
		var newSelectedValues = {};
		valueArray.forEach(function (valueItem) {
			(0, _helper.setDeep)(newSelectedValues, valueItem.split(' > '), !(0, _helper.recLookup)(newSelectedValues, valueItem.split(' > '), _constants.TREELIST_VALUES_PATH_SEPARATOR), true);
		});
		valueToSet = newSelectedValues;
	}
	return valueToSet;
};

var TreeList = function TreeList(props) {
	var showCount = props.showCount,
	    mode = props.mode,
	    showLine = props.showLine,
	    renderItem = props.renderItem,
	    showSearch = props.showSearch,
	    placeholder = props.placeholder,
	    componentId = props.componentId,
	    themePreset = props.themePreset,
	    innerClass = props.innerClass,
	    className = props.className,
	    title = props.title,
	    style = props.style,
	    rawData = props.rawData,
	    error = props.error,
	    isLoading = props.isLoading,
	    showCheckbox = props.showCheckbox,
	    showRadio = props.showRadio,
	    dataField = props.dataField,
	    sortBy = props.sortBy,
	    renderError = props.renderError,
	    renderNoResults = props.renderNoResults,
	    loader = props.loader,
	    aggregationData = props.aggregationData,
	    showSwitcherIcon = props.showSwitcherIcon,
	    switcherIcon = props.switcherIcon;

	var hasMounted = (0, _react.useRef)();

	var _useState2 = (0, _react.useState)(''),
	    searchTerm = _useState2[0],
	    setSearchTerm = _useState2[1];

	var _useState3 = (0, _react.useState)({}),
	    selectedValues = _useState3[0],
	    setSelectedValues = _useState3[1];

	var filterDataBasedOnSearchTerm = function filterDataBasedOnSearchTerm(listArray, parentPath) {
		if (!(listArray && Array.isArray(listArray) && listArray.length)) {
			return null;
		}
		var result = [];
		listArray.forEach(function (ele) {
			var isLeafItem = !ele.list;
			var newParentPath = ele.key;
			if (parentPath) {
				newParentPath = parentPath + '.' + ele.key;
			}
			var keyHasSearchTerm = (0, _suggestions.replaceDiacritics)(ele.key).toLowerCase().includes((0, _suggestions.replaceDiacritics)(searchTerm).toLowerCase()) || (0, _helper.recLookup)(selectedValues, newParentPath, _constants.TREELIST_VALUES_PATH_SEPARATOR);

			if (isLeafItem && keyHasSearchTerm) {
				result.push(_extends({}, ele, {
					initiallyExpanded: keyHasSearchTerm
				}));
			} else if (!isLeafItem) {
				var filteredChildrenItems = filterDataBasedOnSearchTerm(ele.list, newParentPath);
				if (keyHasSearchTerm || !!filteredChildrenItems.length) {
					result.push(_extends({}, ele, {
						initiallyExpanded: keyHasSearchTerm || !!filteredChildrenItems.length,
						list: filteredChildrenItems
					}));
				}
			}
		});

		return result;
	};

	var getTransformedData = (0, _react.useMemo)(function () {
		var transformedData = (0, _helper.transformRawTreeListData)(aggregationData, dataField);
		var filteredData = [];
		if (showSearch && searchTerm) {
			filteredData = filterDataBasedOnSearchTerm(transformedData, '');
		}
		return filteredData.length ? filteredData : transformedData;
	}, [aggregationData, dataField, searchTerm, showSearch]);
	var generateQueryOptions = function generateQueryOptions() {
		var queryOptions = (0, _helper.getQueryOptions)(props);
		var valueArray = (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(selectedValues);
		return (0, _helper.getAggsQuery)(valueArray, queryOptions, props);
	};

	var updateQueryOptions = function updateQueryOptions() {
		// for a new query due to other changes don't append after to get fresh results
		var queryOptions = generateQueryOptions(props, {}, (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(selectedValues));
		if (props.defaultQuery) {
			// eslint-disable-next-line no-use-before-define
			updateDefaultQuery(queryOptions);
		} else {
			props.setQueryOptions((0, _transform.getInternalComponentID)(componentId), queryOptions);
		}
	};

	var getDefaultQuery = function getDefaultQuery(value) {
		var query = null;
		var type = 'term';
		var booleanAggregator = props.queryFormat === 'or' ? 'should' : 'must';

		if (!Array.isArray(value) || value.length === 0) {
			return null;
		}

		if (value) {
			var _bool;

			// adds a sub-query with must as an array of objects for each term/value
			var queryArray = value.map(function (item) {
				return {
					bool: {
						must: item.split(' > ').map(function (subItem, i) {
							var _type, _ref;

							return _ref = {}, _ref[type] = (_type = {}, _type[props.dataField[i]] = subItem, _type), _ref;
						})
					}
				};
			});
			var listQuery = {
				bool: (_bool = {}, _bool[booleanAggregator] = queryArray, _bool)
			};

			query = value.length ? listQuery : null;
		}

		if (query && props.nestedField) {
			return {
				nested: {
					path: props.nestedField,
					query: query
				}
			};
		}

		return query;
	};

	var updateQuery = function updateQuery(value) {
		var customQuery = props.customQuery;

		var query = getDefaultQuery(value);
		var customQueryOptions = void 0;
		if (customQuery) {
			var _ref2 = customQuery(value, props) || {};

			query = _ref2.query;

			customQueryOptions = (0, _helper.getOptionsFromQuery)(customQuery(value, props));
			(0, _helper.updateCustomQuery)(props.componentId, props, value);
		}
		props.setQueryOptions(props.componentId, _extends({}, generateQueryOptions(), customQueryOptions));

		props.updateQuery({
			componentId: props.componentId,
			query: query,
			value: value,
			label: props.filterLabel,
			showFilter: props.showFilter,
			URLParams: props.URLParams,
			componentType: _constants.componentTypes.treeList
		});
	};

	function updateDefaultQuery(queryOptions) {
		var value = (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(selectedValues);
		// Update default query for RS API
		(0, _helper.updateDefaultQuery)(componentId, props, value);
		(0, _helper.updateInternalQuery)((0, _transform.getInternalComponentID)(componentId), queryOptions, value, props, generateQueryOptions(), null);
	}

	var setValue = function setValue(value) {
		var hasMountedParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : hasMounted.current;

		var finalValues = Array.isArray(value) === false ? (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(value) : value;
		var performUpdate = function performUpdate() {
			var handleUpdates = function handleUpdates() {
				updateQuery(finalValues);
				if (props.onValueChange) props.onValueChange(finalValues);
			};

			if (hasMountedParam) {
				setSelectedValues(Array.isArray(value) ? transformValueIntoLocalState(value) : value);
				handleUpdates();
			} else {
				handleUpdates();
			}
		};

		(0, _helper.checkValueChange)(props.componentId, finalValues, props.beforeValueChange, performUpdate);
	};

	useConstructor(function () {
		hasMounted.current = false;
		var defaultValue = props.defaultValue || props.value;
		var currentValueArray = props.selectedValue || defaultValue || [];
		// update local state for selected values
		if (currentValueArray.length) {
			var newSelectedValues = transformValueIntoLocalState(currentValueArray);
			setValue(newSelectedValues, true);
		}
		// Set custom and default queries in store
		(0, _helper.updateCustomQuery)(componentId, props, currentValueArray);
		(0, _helper.updateDefaultQuery)(componentId, props, currentValueArray);

		updateQueryOptions();
	});

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			updateDefaultQuery();
			updateQuery([]);
		}
	}, [props.defaultQuery]);

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			var valueArray = (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(selectedValues) || [];
			updateQuery(valueArray);
		}
	}, [props.customQuery]);

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			updateQueryOptions();
		}
	}, [sortBy]);

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			var valueArray = (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(selectedValues) || [];
			updateQueryOptions();
			updateQuery(valueArray);
		}
	}, [dataField]);

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			if (props.value !== undefined) {
				setValue(props.value);
			}
		}
	}, [props.value]);

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			if (!(0, _helper.isEqual)((0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(selectedValues), props.selectedValue)) {
				var value = props.value,
				    onChange = props.onChange;

				var valueToSet = [];
				if (Array.isArray(props.selectedValue) && props.selectedValue.length) {
					valueToSet = props.selectedValue;
				}
				if (value === undefined) {
					setValue(valueToSet);
				} else if (onChange && !(0, _helper.isEqual)(value, valueToSet)) {
					onChange(valueToSet);
				}
			}
		}
	}, [props.selectedValue]);

	(0, _react.useEffect)(function () {
		hasMounted.current = true;
	}, []);

	var handleInputChange = function handleInputChange(e) {
		var value = e.target.value;

		setSearchTerm(value);
	};
	var renderSearch = function renderSearch() {
		if (showSearch) {
			return (0, _core.jsx)(_Input2.default, {
				className: (0, _helper.getClassName)(innerClass, 'input') || null,
				onChange: handleInputChange,
				value: searchTerm,
				placeholder: placeholder || 'Search',
				style: {
					margin: '0 0 8px'
				},
				'aria-label': componentId + '-search',
				themePreset: themePreset
			});
		}
		return null;
	};

	var sanitizeObject = function sanitizeObject(obj) {
		return JSON.parse(JSON.stringify(obj, function (key, value) {
			return (
				// eslint-disable-next-line eqeqeq
				value === null || value == {} || value === false ? undefined : value
			);
		}));
	};

	var handleListItemClick = function handleListItemClick(key, parentPath) {
		var path = key;
		if (parentPath) {
			path = '' + parentPath + _constants.TREELIST_VALUES_PATH_SEPARATOR + key;
		}
		var newSelectedValues = _extends({}, selectedValues);
		if (mode === 'single') {
			newSelectedValues = {};
			(0, _helper.setDeep)(newSelectedValues, path.split(_constants.TREELIST_VALUES_PATH_SEPARATOR), true, true);
		} else {
			var newValue = !(0, _helper.recLookup)(newSelectedValues, path, _constants.TREELIST_VALUES_PATH_SEPARATOR);

			(0, _helper.setDeep)(newSelectedValues, path.split(_constants.TREELIST_VALUES_PATH_SEPARATOR), newValue, true);
		}
		newSelectedValues = sanitizeObject(_extends({}, newSelectedValues));
		if (props.value === undefined) {
			setValue(newSelectedValues);
		} else if (props.onChange) {
			var valueToSet = (0, _helper.transformTreeListLocalStateIntoQueryComptaibleFormat)(newSelectedValues);

			props.onChange(valueToSet);
		}
	};

	var renderIcon = function renderIcon(isLeafNode) {
		var showIcon = props.showIcon,
		    showLeafIcon = props.showLeafIcon,
		    icon = props.icon,
		    leafIcon = props.leafIcon;


		if (isLeafNode) {
			if (!showLeafIcon) return null;

			if (leafIcon) {
				return leafIcon;
			}

			return (0, _core.jsx)(
				'span',
				{ role: 'img', 'aria-label': 'file', className: '--leaf-icon' },
				(0, _core.jsx)(
					'svg',
					{
						viewBox: '64 64 896 896',
						focusable: 'false',
						'data-icon': 'file',
						width: '1em',
						height: '1em',
						fill: 'currentColor',
						'aria-hidden': 'true'
					},
					(0, _core.jsx)('path', { d: 'M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z' })
				)
			);
		}
		if (!showIcon) return null;

		if (icon) {
			return icon;
		}
		return (0, _core.jsx)(
			'span',
			{ role: 'img', 'aria-label': 'folder-open', className: '--folder-icon' },
			(0, _core.jsx)(
				'svg',
				{
					viewBox: '64 64 896 896',
					focusable: 'false',
					'data-icon': 'folder-open',
					width: '1em',
					height: '1em',
					fill: 'currentColor',
					'aria-hidden': 'true'
				},
				(0, _core.jsx)('path', { d: 'M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 00-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z' })
			)
		);
	};

	var getComponent = function getComponent() {
		var data = {
			data: getTransformedData,
			rawData: rawData,
			error: error,
			handleClick: handleListItemClick,
			value: selectedValues,
			loading: isLoading
		};
		return (0, _helper.getComponent)(data, props);
	};

	if (isLoading) {
		return loader || null;
	}

	if (renderError && error) {
		return (0, _helper.isFunction)(renderError) ? renderError(error) : renderError;
	}

	if (!getTransformedData || getTransformedData.length === 0) {
		return renderNoResults ? renderNoResults() : null;
	}
	return (0, _core.jsx)(
		_Container2.default,
		{ style: style, className: className },
		props.title && (0, _core.jsx)(
			_Title2.default,
			{ className: (0, _helper.getClassName)(innerClass, 'title') || null },
			title
		),
		renderSearch(),
		(0, _helper.hasCustomRenderer)(props) ? getComponent() : (0, _core.jsx)(_HierarchicalMenuComponent2.default, {
			key: 'initial-node',
			listArray: getTransformedData,
			parentPath: '',
			isExpanded: true,
			listItemProps: {
				mode: mode,
				selectedValues: selectedValues,
				searchTerm: searchTerm,
				showLine: showLine,
				renderItem: renderItem,
				handleListItemClick: handleListItemClick,
				showCheckbox: showCheckbox,
				innerClass: innerClass,
				showRadio: showRadio,
				renderIcon: renderIcon,
				showCount: showCount,
				showSwitcherIcon: showSwitcherIcon,
				switcherIcon: switcherIcon
			}
		})
	);
};
TreeList.propTypes = {
	selectedValue: _types2.default.selectedValue,
	error: _types2.default.title,
	rawData: _types2.default.rawData,
	aggregationData: _types2.default.rawData,
	themePreset: _types2.default.themePreset,
	updateQuery: _types2.default.funcRequired,
	setQueryOptions: _types2.default.funcRequired,
	// component props
	componentId: _types2.default.string.isRequired,
	className: _types2.default.string,
	style: _types2.default.style,
	showRadio: _types2.default.bool,
	showCheckbox: _types2.default.bool,
	mode: _propTypes2.default.oneOf(['single', 'multiple']),
	showCount: _types2.default.bool,
	showSearch: _types2.default.bool,
	showIcon: _types2.default.bool,
	icon: _types2.default.children,
	showLeafIcon: _types2.default.bool,
	leafIcon: _types2.default.children,
	showLine: _types2.default.bool,
	switcherIcon: _types2.default.func,
	render: _types2.default.func,
	renderItem: _types2.default.func,
	innerClass: _types2.default.style,
	placeholder: _types2.default.string,
	title: _types2.default.title,
	isLoading: _types2.default.bool,
	dataField: _types2.default.stringArray.isRequired,
	onQueryChange: _types2.default.func,
	defaultValue: _types2.default.stringArray,
	value: _types2.default.stringArray,
	customQuery: _types2.default.func,
	defaultQuery: _types2.default.func,
	index: _types2.default.string,
	showFilter: _types2.default.bool,
	URLParams: _types2.default.bool,
	filterLabel: _types2.default.string,
	onChange: _types2.default.func,
	onValueChange: _types2.default.func,
	beforeValueChange: _types2.default.func,
	sortBy: _types2.default.sortByWithCount,
	onError: _types2.default.func,
	showSwitcherIcon: _types2.default.bool,
	renderError: _types2.default.title,
	renderNoResults: _types2.default.func,
	loader: _types2.default.title,
	aggergationSize: _types2.default.number,
	endpoint: _types2.default.endpoint,
	queryFormat: _types2.default.queryFormatSearch,
	size: _types2.default.number,
	nestedField: _types2.default.string
};

TreeList.defaultProps = {
	className: null,
	showSwitcherIcon: true,
	style: null,
	showRadio: false,
	showCheckbox: false,
	mode: 'multiple',
	showCount: false,
	showSearch: false,
	showIcon: false,
	showLeafIcon: false,
	showLine: false,
	URLParams: false,
	sortBy: 'count',
	queryFormat: 'or',
	size: 100
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,
		rawData: state.rawData[props.componentId] || {},
		aggregationData: props.nestedField && state.aggregations[props.componentId] ? state.aggregations[props.componentId].reactivesearch_nested : state.aggregations[props.componentId] || {},
		themePreset: state.config.themePreset,
		error: state.error[props.componentId],
		isLoading: state.isLoading[props.componentId]
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		setQueryOptions: function setQueryOptions(component, props) {
			return dispatch((0, _query.setQueryOptions)(component, props));
		},
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _query.updateQuery)(updateQueryObject));
		}
	};
};

// Add componentType for SSR
TreeList.componentType = _constants.componentTypes.treeList;

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(function (props) {
	return (0, _core.jsx)(TreeList, _extends({ ref: props.myForwardedRef }, props));
}));

var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return (0, _core.jsx)(
		_PreferencesConsumer2.default,
		{ userProps: props },
		function (preferenceProps) {
			return (0, _core.jsx)(
				_ComponentWrapper2.default,
				_extends({}, preferenceProps, {
					internalComponent: true,
					componentType: _constants.componentTypes.treeList,
					mode: preferenceProps.testMode ? 'test' : ''
				}),
				function (componentProps) {
					return (0, _core.jsx)(ConnectedComponent, _extends({}, preferenceProps, componentProps, {
						myForwardedRef: ref
					}));
				}
			);
		}
	);
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, TreeList);

ForwardRefComponent.displayName = 'TreeList';
exports.default = ForwardRefComponent;