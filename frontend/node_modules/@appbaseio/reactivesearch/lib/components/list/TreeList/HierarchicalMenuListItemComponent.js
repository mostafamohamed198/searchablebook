'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _TreeList = require('../../../styles/TreeList');

var _Button = require('../../../styles/Button');

var _Button2 = _interopRequireDefault(_Button);

var _FormControlList = require('../../../styles/FormControlList');

var _HierarchicalMenuComponent = require('./HierarchicalMenuComponent');

var _HierarchicalMenuComponent2 = _interopRequireDefault(_HierarchicalMenuComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HierarchicalMenuListItemComponent = function HierarchicalMenuListItemComponent(_ref) {
	var selectedValues = _ref.selectedValues,
	    mode = _ref.mode,
	    searchTerm = _ref.searchTerm,
	    listItem = _ref.listItem,
	    parentPath = _ref.parentPath,
	    showLine = _ref.showLine,
	    renderItem = _ref.renderItem,
	    handleListItemClick = _ref.handleListItemClick,
	    showCheckbox = _ref.showCheckbox,
	    innerClass = _ref.innerClass,
	    showRadio = _ref.showRadio,
	    renderIcon = _ref.renderIcon,
	    showCount = _ref.showCount,
	    showSwitcherIcon = _ref.showSwitcherIcon,
	    switcherIcon = _ref.switcherIcon;

	if (!(listItem instanceof Object) || Object.keys(listItem).length === 0) {
		return null;
	}
	var listItemLabel = listItem.key;
	var listItemCount = listItem.count;
	var isLeafNode = !(Array.isArray(listItem.list) && listItem.list.length > 0);

	var newParentPath = listItemLabel;
	if (parentPath) {
		newParentPath = '' + parentPath + _constants.TREELIST_VALUES_PATH_SEPARATOR + listItemLabel;
	}
	var isSelected = false;
	if (mode === 'single') {
		if ((0, _helper.recLookup)(selectedValues, newParentPath, _constants.TREELIST_VALUES_PATH_SEPARATOR) === true) {
			isSelected = true;
		}
	} else {
		isSelected = !!(0, _helper.recLookup)(selectedValues, newParentPath, _constants.TREELIST_VALUES_PATH_SEPARATOR);
	}

	var _useState = (0, _react.useState)(!!(0, _helper.recLookup)(selectedValues, newParentPath, _constants.TREELIST_VALUES_PATH_SEPARATOR)),
	    isExpanded = _useState[0],
	    setIsExpanded = _useState[1];

	(0, _react.useEffect)(function () {
		setIsExpanded(!!(0, _helper.recLookup)(selectedValues, newParentPath, _constants.TREELIST_VALUES_PATH_SEPARATOR));
	}, [selectedValues]);

	(0, _react.useEffect)(function () {
		if (listItem.initiallyExpanded) {
			setIsExpanded(listItem.initiallyExpanded);
		}
	}, [listItem.initiallyExpanded]);

	var renderSwitcherIcon = function renderSwitcherIcon(isExpandedProp) {
		if (showSwitcherIcon === false) {
			return null;
		}
		if (typeof switcherIcon === 'function') {
			return switcherIcon(isExpandedProp);
		}

		return (
			/* eslint-disable jsx-a11y/click-events-have-key-events
   , jsx-a11y/no-static-element-interactions,jsx-a11y/no-noninteractive-tabindex */
			_react2.default.createElement(
				'span',
				{
					tabIndex: '0',
					onClick: function onClick(e) {
						e.stopPropagation();
						setIsExpanded(!isExpanded);
					},
					className: '--switcher-icon'
				},
				'\u27A4'
			)
		);
	};
	return _react2.default.createElement(
		_TreeList.HierarchicalMenuListItem,
		{
			className: (isSelected ? '-selected-item' : '') + ' ' + (isExpanded ? '-expanded-item' : ''),
			key: newParentPath,
			showLine: showLine
		},
		_react2.default.createElement(
			_Button2.default,
			{
				isLinkType: true,
				onClick: function onClick() {
					handleListItemClick(listItemLabel, parentPath);
				}
			},
			typeof renderItem === 'function' ? renderItem(listItemLabel, listItemCount, isSelected) : _react2.default.createElement(
				_react2.default.Fragment,
				null,
				!isLeafNode && renderSwitcherIcon(isSelected),
				mode === 'multiple' && showCheckbox && _react2.default.createElement(
					_react2.default.Fragment,
					null,
					_react2.default.createElement(_FormControlList.Checkbox, {
						className: (0, _helper.getClassName)(innerClass, 'checkbox') || null,
						checked: isSelected,
						id: listItemLabel + '-checkbox-' + newParentPath,
						name: listItemLabel + '-checkbox-' + newParentPath,
						show: true,
						readOnly: true
					}),
					_react2.default.createElement('label', {
						style: {
							width: '26px',
							marginTop: 0,
							marginBottom: 0,
							marginRight: '-9px',
							left: '-3px'
						},
						htmlFor: listItemLabel + '-checkbox-' + newParentPath,
						onClick: function onClick(e) {
							e.stopPropagation();
						}
					})
				),
				mode === 'single' && showRadio && _react2.default.createElement(
					_react2.default.Fragment,
					null,
					_react2.default.createElement(_FormControlList.Radio, {
						checked: isSelected,
						className: (0, _helper.getClassName)(innerClass, 'radio') || null,
						id: listItemLabel + '-radio-' + newParentPath,
						name: listItemLabel + '-radio-' + newParentPath,
						show: true,
						readOnly: true
					}),
					_react2.default.createElement('label', {
						style: {
							width: '26px',
							marginTop: 0,
							marginBottom: 0,
							marginRight: '-9px',
							left: '-3px'
						},
						htmlFor: listItemLabel + '-radio-' + newParentPath,
						onClick: function onClick(e) {
							e.stopPropagation();
						}
					})
				),
				' ',
				renderIcon(isLeafNode),
				_react2.default.createElement(
					'div',
					{ className: '--list-item-label-count-wrapper' },
					_react2.default.createElement(
						'span',
						{
							className: '--list-item-label ' + ((0, _helper.getClassName)(innerClass, 'label') || '')
						},
						listItemLabel
					),
					showCount && _react2.default.createElement(
						'span',
						{
							className: '--list-item-count ' + ((0, _helper.getClassName)(innerClass, 'count') || '')
						},
						listItemCount
					)
				)
			)
		),
		isLeafNode === false && _react2.default.createElement(
			'div',
			{ className: '--list-child ' + (showSwitcherIcon ? ' --show-switcher-icon' : '') },
			_react2.default.createElement(_HierarchicalMenuComponent2.default, {
				key: newParentPath + '-' + listItemLabel + '-' + listItemCount,
				listArray: listItem.list,
				parentPath: newParentPath,
				isExpanded: isExpanded,
				listItemProps: {
					mode: mode,
					selectedValues: selectedValues,
					searchTerm: searchTerm,
					showLine: showLine,
					renderItem: renderItem,
					handleListItemClick: handleListItemClick,
					renderSwitcherIcon: renderSwitcherIcon,
					showCheckbox: showCheckbox,
					innerClass: innerClass,
					showRadio: showRadio,
					renderIcon: renderIcon,
					showCount: showCount,
					showSwitcherIcon: showSwitcherIcon,
					switcherIcon: switcherIcon
				}
			})
		)
	);
};
HierarchicalMenuListItemComponent.propTypes = {
	parentPath: _types2.default.string,
	selectedValues: _types2.default.rawData,
	mode: _types2.default.string,
	searchTerm: _types2.default.string,
	listItem: _types2.default.rawData,
	showLine: _types2.default.bool,
	renderItem: _types2.default.func,
	handleListItemClick: _types2.default.func,
	renderSwitcherIcon: _types2.default.func,
	showCheckbox: _propTypes2.default.bool,
	innerClass: _types2.default.style,
	showRadio: _propTypes2.default.bool,
	renderIcon: _types2.default.func,
	showCount: _propTypes2.default.bool,
	showSwitcherIcon: _types2.default.bool,
	switcherIcon: _types2.default.children
};
exports.default = HierarchicalMenuListItemComponent;