'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /** @jsxRuntime classic */
/** @jsx jsx */


var _core = require('@emotion/core');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _emotionTheming = require('emotion-theming');

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _query = require('@appbaseio/reactivecore/lib/actions/query');

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _AIAnswer = require('../../../styles/AIAnswer');

var _utils = require('../../../utils');

var _PreferencesConsumer = require('../../basic/PreferencesConsumer');

var _PreferencesConsumer2 = _interopRequireDefault(_PreferencesConsumer);

var _ComponentWrapper = require('../../basic/ComponentWrapper');

var _ComponentWrapper2 = _interopRequireDefault(_ComponentWrapper);

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _Title = require('../../../styles/Title');

var _Title2 = _interopRequireDefault(_Title);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AIAnswer = function AIAnswer(props) {
	var _React$useState = _react2.default.useState([]),
	    messages = _React$useState[0],
	    setMessages = _React$useState[1];

	var AISessionId = (0, _react.useRef)(null);

	var handleSendMessage = function handleSendMessage(text) {
		var isRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

		if (!isRetry) setMessages([].concat(messages, [{ content: text, role: _constants.AI_ROLES.USER }]));
		if (AISessionId.current) {
			props.getAIResponse(AISessionId.current, props.componentId, text);
		} else {
			console.error('AISessionId for ' + props.componentId + ' is missing! AIAnswer component requires an AISession to function. Trying reloading the App.');
		}
	};

	(0, _react.useEffect)(function () {
		if (props.AIResponse) {
			AISessionId.current = (((0, _helper.getObjectFromLocalStorage)(_constants.AI_LOCAL_CACHE_KEY) || {})[props.componentId] || {}).sessionId || null;
			var _props$AIResponse = props.AIResponse,
			    request = _props$AIResponse.request,
			    response = _props$AIResponse.response;

			var finalMessages = [];

			// pushing message history so far
			if (request && request.messages && Array.isArray(request.messages)) {
				finalMessages.push.apply(finalMessages, request.messages.filter(function (msg) {
					return msg.role !== _constants.AI_ROLES.SYSTEM;
				}));
			}

			// pushing fresh response
			if (response && response.choices && Array.isArray(response.choices) && response.choices.length > 0) {
				finalMessages.push(response.choices[0].message);
			}

			setMessages(finalMessages);
		}
	}, [props.AIResponse]);

	(0, _react.useEffect)(function () {
		if (props.onData) {
			props.onData({
				data: messages,
				rawData: props.rawData,
				loading: props.isAIResponseLoading,
				error: props.AIResponseError
			});
		}
	}, [props.rawData, messages, props.isAIResponseLoading, props.AIResponseError]);
	(0, _react.useEffect)(function () {
		return function () {
			if (props.clearSessionOnDestroy) {
				// cleanup logic
				// final Object to store in local storage cache
				var finalCacheObj = (0, _helper.getObjectFromLocalStorage)(_constants.AI_LOCAL_CACHE_KEY) || {};
				// delete current component's cache
				delete finalCacheObj[props.componentId];
				// update local cache
				(0, _helper.setObjectInLocalStorage)(_constants.AI_LOCAL_CACHE_KEY, finalCacheObj);
			}
		};
	}, []);

	return (0, _core.jsx)(
		_AIAnswer.Chatbox,
		null,
		props.title && (0, _core.jsx)(
			_Title2.default,
			{ className: (0, _helper.getClassName)(props.innerClass, 'ai-title') || null },
			props.title
		),
		(0, _core.jsx)(_Chat2.default, {
			messages: messages,
			onSendMessage: handleSendMessage,
			iconPosition: props.iconPosition,
			showIcon: props.showIcon,
			themePreset: props.themePreset,
			icon: props.icon,
			iconURL: props.iconURL,
			showVoiceInput: props.showVoiceInput,
			renderMic: props.renderMic,
			getMicInstance: props.getMicInstance,
			innerClass: props.innerClass,
			placeholder: props.placeholder,
			componentId: props.componentId,
			isAIResponseLoading: props.isAIResponseLoading || props.isLoading,
			AIResponse: props.AIResponse,
			AIResponseError: props.AIResponseError,
			enterButton: props.enterButton,
			renderEnterButton: props.renderEnterButton,
			showInput: props.showInput,
			render: props.render,
			rawData: props.rawData,
			theme: props.theme,
			renderError: props.renderError
		})
	);
};

AIAnswer.propTypes = {
	componentId: _types2.default.string.isRequired,
	showVoiceInput: _propTypes2.default.bool,
	showIcon: _propTypes2.default.bool,
	onData: _types2.default.func,
	react: _types2.default.react,
	AIConfig: _types2.default.AIConfig,
	iconPosition: _types2.default.iconPosition,
	themePreset: _types2.default.themePreset,
	theme: _types2.default.style,
	icon: _types2.default.children,
	iconURL: _types2.default.string,
	renderMic: _types2.default.func,
	getMicInstance: _types2.default.func,
	innerClass: _types2.default.style,
	placeholder: _types2.default.string,
	title: _types2.default.title,
	AIResponse: _types2.default.componentObject,
	isAIResponseLoading: _types2.default.bool,
	AIResponseError: _types2.default.componentObject,
	getAIResponse: _types2.default.func.isRequired,
	enterButton: _types2.default.bool,
	renderEnterButton: _types2.default.title,
	showInput: _types2.default.bool,
	clearSessionOnDestroy: _types2.default.bool,
	rawData: _types2.default.rawData,
	render: _types2.default.func,
	onError: _types2.default.func,
	renderError: _types2.default.title,
	isLoading: _types2.default.boolRequired
};

AIAnswer.defaultProps = {
	placeholder: 'Ask a question',
	showVoiceInput: false,
	showIcon: true,
	iconPosition: 'left',
	enterButton: true,
	renderEnterButton: null,
	showInput: true,
	clearSessionOnDestroy: true
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		AIResponse: state.AIResponses[props.componentId] && state.AIResponses[props.componentId].response,
		isAIResponseLoading: state.AIResponses[props.componentId] && state.AIResponses[props.componentId].isLoading,
		AIResponseError: state.AIResponses[props.componentId] && state.AIResponses[props.componentId].error,
		rawData: state.rawData[props.componentId],
		themePreset: state.config.themePreset,
		isLoading: state.isLoading[props.componentId] || false
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		getAIResponse: function getAIResponse(sessionId, componentId, message) {
			return dispatch((0, _query.fetchAIResponse)(sessionId, componentId, message));
		}
	};
};

// Add componentType for SSR
AIAnswer.componentType = _constants.componentTypes.AIAnswer;

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(function (props) {
	return (0, _core.jsx)(AIAnswer, _extends({ ref: props.myForwardedRef }, props));
}));

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return (0, _core.jsx)(
		_PreferencesConsumer2.default,
		{ userProps: props },
		function (preferenceProps) {
			return (0, _core.jsx)(
				_ComponentWrapper2.default,
				_extends({}, preferenceProps, {
					internalComponent: true,
					componentType: _constants.componentTypes.AIAnswer,
					enableAI: true,
					mode: preferenceProps.testMode ? 'test' : ''
				}, preferenceProps.AIConfig && preferenceProps.AIConfig.topDocsForContext ? { size: preferenceProps.AIConfig.topDocsForContext } : {}),
				function (componentProps) {
					return (0, _core.jsx)(ConnectedComponent, _extends({}, preferenceProps, componentProps, {
						myForwardedRef: ref
					}));
				}
			);
		}
	);
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, AIAnswer);

ForwardRefComponent.displayName = 'AIAnswer';
exports.default = ForwardRefComponent;