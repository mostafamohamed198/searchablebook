'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _xss = require('xss');

var _xss2 = _interopRequireDefault(_xss);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _remarkable = require('remarkable');

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _AIAnswer = require('../../../styles/AIAnswer');

var _InputWrapper = require('../../../styles/InputWrapper');

var _InputWrapper2 = _interopRequireDefault(_InputWrapper);

var _InputGroup = require('../../../styles/InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _SearchSvg = require('../../shared/SearchSvg');

var _SearchSvg2 = _interopRequireDefault(_SearchSvg);

var _IconGroup = require('../../../styles/IconGroup');

var _IconGroup2 = _interopRequireDefault(_IconGroup);

var _IconWrapper = require('../../../styles/IconWrapper');

var _IconWrapper2 = _interopRequireDefault(_IconWrapper);

var _Mic = require('../addons/Mic');

var _Mic2 = _interopRequireDefault(_Mic);

var _Button = require('../../../styles/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var md = new _remarkable.Remarkable();

md.set({
	html: true,
	breaks: true,
	xhtmlOut: true
});

var Chat = function Chat(props) {
	var messages = props.messages,
	    onSendMessage = props.onSendMessage;

	var _React$useState = _react2.default.useState(''),
	    inputMessage = _React$useState[0],
	    setInputMessage = _React$useState[1];

	var messagesContainerRef = _react2.default.useRef(null);

	var handleMessageInputChange = function handleMessageInputChange(e) {
		setInputMessage(e.target.value);
	};

	var handleSendMessage = function handleSendMessage(e) {
		e.preventDefault();
		if (props.isAIResponseLoading) {
			return;
		}
		if (inputMessage.trim()) {
			onSendMessage(inputMessage);
			setInputMessage('');
		}
	};
	var handleKeyPress = function handleKeyPress(e) {
		if (e.key === 'Enter') {
			handleSendMessage(e);
		}
	};
	var renderIcon = function renderIcon() {
		if (props.showIcon) {
			if (props.icon) {
				return props.icon;
			}
			if (props.iconURL) {
				return _react2.default.createElement('img', { style: { maxHeight: '25px' }, src: (0, _xss2.default)(props.iconURL), alt: 'search-icon' });
			}
			return _react2.default.createElement(_SearchSvg2.default, null);
		}
		return null;
	};

	var handleVoiceResults = function handleVoiceResults(_ref) {
		var results = _ref.results;

		if (results && results[0] && results[0].isFinal && results[0][0] && results[0][0].transcript && results[0][0].transcript.trim()) {
			onSendMessage(results[0][0].transcript.trim());
			setInputMessage('');
		}
	};
	var shouldMicRender = function shouldMicRender(showVoiceSearch) {
		// checks for SSR
		if (typeof window === 'undefined') return false;
		return showVoiceSearch && (window.webkitSpeechRecognition || window.SpeechRecognition);
	};
	var renderIcons = function renderIcons() {
		var renderMic = props.renderMic,
		    getMicInstance = props.getMicInstance,
		    showVoiceInput = props.showVoiceInput,
		    iconPosition = props.iconPosition,
		    innerClass = props.innerClass;

		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(
				_IconGroup2.default,
				{ groupPosition: 'right', positionType: 'absolute' },
				shouldMicRender(showVoiceInput) && _react2.default.createElement(_Mic2.default, {
					getInstance: getMicInstance,
					render: renderMic,
					onResult: handleVoiceResults,
					className: (0, _helper.getClassName)(innerClass, 'ai-search-mic') || null
				}),
				iconPosition === 'right' && _react2.default.createElement(
					_IconWrapper2.default,
					null,
					renderIcon()
				)
			),
			_react2.default.createElement(
				_IconGroup2.default,
				{ groupPosition: 'left', positionType: 'absolute' },
				iconPosition === 'left' && _react2.default.createElement(
					_IconWrapper2.default,
					null,
					renderIcon()
				)
			)
		);
	};

	var onEnterButtonClick = function onEnterButtonClick(e) {
		handleSendMessage(e);
	};

	var renderEnterButtonFunc = function renderEnterButtonFunc() {
		var enterButton = props.enterButton,
		    renderEnterButton = props.renderEnterButton;

		if (enterButton) {
			var getEnterButtonMarkup = function getEnterButtonMarkup() {
				if (typeof renderEnterButton === 'function') {
					return renderEnterButton(onEnterButtonClick);
				}

				return _react2.default.createElement(
					_AIAnswer.SendButton,
					{
						primary: true,
						type: 'submit',
						tabIndex: 0,
						onClick: onEnterButtonClick,
						onKeyPress: handleKeyPress,
						className: 'enter-btn ' + (0, _helper.getClassName)(props.innerClass, 'ai-enter-button')
					},
					'Send'
				);
			};

			return _react2.default.createElement(
				'div',
				{ className: 'ai-enter-button-wrapper' },
				getEnterButtonMarkup()
			);
		}

		return null;
	};

	var getComponent = function getComponent() {
		var AIResponseError = props.AIResponseError,
		    isAIResponseLoading = props.isAIResponseLoading,
		    rawData = props.rawData;


		var data = {
			error: AIResponseError,
			loading: isAIResponseLoading,
			data: messages,
			rawData: rawData
		};
		return (0, _helper.getComponent)(data, props);
	};
	var handleRetryRequest = function handleRetryRequest() {
		if (messages) {
			var lastUserRequestMessage = messages[messages.length - 1].content;

			onSendMessage(lastUserRequestMessage, true);
		}
	};

	var renderErrorEle = function renderErrorEle() {
		var AIResponseError = props.AIResponseError,
		    renderError = props.renderError,
		    isAIResponseLoading = props.isAIResponseLoading;

		if (AIResponseError && !isAIResponseLoading) {
			if (renderError) {
				return _react2.default.createElement(
					'div',
					{
						className: '--ai-answer-error-container ' + ((0, _helper.getClassName)(props.innerClass, 'ai-error') || '')
					},
					(0, _helper.isFunction)(renderError) ? renderError(AIResponseError, handleRetryRequest) : renderError
				);
			}
			return _react2.default.createElement(
				'div',
				{
					className: '--ai-answer-error-container ' + ((0, _helper.getClassName)(props.innerClass, 'ai-error') || '')
				},
				_react2.default.createElement(
					'div',
					{ className: '--default-error-element' },
					_react2.default.createElement(
						'span',
						null,
						AIResponseError.message ? AIResponseError.message : 'There was an error in generating the response.',
						' ',
						AIResponseError.code ? 'Code:\n\t\t\t\t\t\t\t' + AIResponseError.code : ''
					),
					_react2.default.createElement(
						_Button2.default,
						{ primary: true, onClick: handleRetryRequest },
						'Try again'
					)
				)
			);
		}
		return null;
	};
	_react2.default.useEffect(function () {
		if (messagesContainerRef.current) {
			messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
		}
	}, [messages]);

	return _react2.default.createElement(
		_AIAnswer.ChatContainer,
		{ theme: props.theme, showInput: props.showInput },
		(0, _helper.hasCustomRenderer)(props) && getComponent(),
		!(0, _helper.hasCustomRenderer)(props) && _react2.default.createElement(
			_AIAnswer.MessagesContainer,
			{
				themePreset: props.themePreset,
				theme: props.theme,
				ref: messagesContainerRef
			},
			messages.map(function (message, index) {
				return _react2.default.createElement(_AIAnswer.Message
				// eslint-disable-next-line react/no-array-index-key
				, { key: index,
					isSender: message.role === _constants.AI_ROLES.USER,
					dangerouslySetInnerHTML: {
						__html: md.render((0, _xss2.default)(message.content))
					},
					themePreset: props.themePreset,
					theme: props.theme,
					className: '--ai-answer-message ' + ((0, _helper.getClassName)(props.innerClass, 'ai-message') || '')
				});
			}),
			props.isAIResponseLoading && _react2.default.createElement(
				_AIAnswer.Message,
				{
					themePreset: props.themePreset,
					theme: props.theme,
					isSender: false,
					className: '--ai-answer-message ' + ((0, _helper.getClassName)(props.innerClass, 'ai-message') || null)
				},
				_react2.default.createElement(
					_AIAnswer.TypingIndicator,
					null,
					_react2.default.createElement(_AIAnswer.TypingDot, { themePreset: props.themePreset }),
					_react2.default.createElement(_AIAnswer.TypingDot, { themePreset: props.themePreset }),
					_react2.default.createElement(_AIAnswer.TypingDot, { themePreset: props.themePreset })
				)
			)
		),
		renderErrorEle(),
		props.showInput && _react2.default.createElement(
			_AIAnswer.MessageInputContainer,
			{
				className: '--ai-input-container',
				onSubmit: handleSendMessage
			},
			_react2.default.createElement(
				_InputGroup2.default,
				{ isOpen: false },
				_react2.default.createElement(
					_InputWrapper2.default,
					null,
					_react2.default.createElement(_AIAnswer.MessageInput, {
						type: 'text',
						placeholder: props.placeholder,
						value: inputMessage,
						onChange: handleMessageInputChange,
						onKeyPress: handleKeyPress,
						id: props.componentId + '-ai-input',
						showIcon: props.showIcon,
						iconPosition: props.iconPosition,
						themePreset: props.themePreset,
						disabled: props.isAIResponseLoading,
						className: (0, _helper.getClassName)(props.innerClass, 'ai-input') || null
					}),
					' ',
					renderIcons()
				)
			),
			renderEnterButtonFunc()
		),
		' '
	);
};

Chat.propTypes = {
	messages: _propTypes2.default.arrayOf(_propTypes2.default.shape({
		content: _propTypes2.default.string.isRequired,
		role: _propTypes2.default.string.isRequired
	})).isRequired,
	onSendMessage: _propTypes2.default.func.isRequired,
	componentId: _propTypes2.default.string.isRequired,
	showIcon: _propTypes2.default.bool,
	iconPosition: _types2.default.iconPosition,
	themePreset: _types2.default.themePreset,
	icon: _types2.default.children,
	iconURL: _types2.default.string,
	showVoiceInput: _types2.default.bool,
	renderMic: _types2.default.func,
	getMicInstance: _types2.default.func,
	innerClass: _types2.default.style,
	placeholder: _types2.default.string,
	AIResponse: _types2.default.componentObject,
	isAIResponseLoading: _types2.default.bool,
	AIResponseError: _types2.default.componentObject,
	enterButton: _types2.default.bool,
	renderEnterButton: _types2.default.title,
	showInput: _types2.default.bool,
	render: _types2.default.func,
	rawData: _types2.default.rawData,
	theme: _types2.default.style,
	renderError: _types2.default.title
};

exports.default = Chat;